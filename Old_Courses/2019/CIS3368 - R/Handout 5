---
title: "R Notebook"
output: html_notebook
---

```{r}
pkg=c("ggplot2","lattice")
new.pkg=pkg[!(pkg %in% installed.packages())]
if (length(new.pkg))
{install.packages(new.pkg)}

# Using local URL for the downloaded data
avURL="https://datadrivensecurity.info/book/ch03/data/reputation.data"
#View(avURL)

# Using local path for the downloaded data
avURL2="reputation.data"
#View(avURL2)

# Using "if" conditional to avoid re-download files
if (file.access(avURL2))
{download.file(avURL,avURL2)}
```

```{r}
# Reading on the URL address DB into a dataframe
mydataframE=read.csv(avURL,sep="#",header=FALSE)
# Renaming columns
colnames(mydataframE)=c("IP","Reliability","Risk","Type","Country","Locale","Coords","x")
# Looking at the structure of our dataframe
str(mydataframE)
```

```{r}
# Looking 1st 5 observation from our dataframe 
head(mydataframE)
```
```{r}
# Looking a brief statistical description on column "Reliability"
summary(mydataframE$Reliability)
```
```{r}
# Looking a brief statistical description on column "Risk"
summary(mydataframE$Risk)
```

```{r}
# Looking a quick table based on "Reliability"
table(mydataframE$Reliability)
```
```{r}
# Looking a quick table based on "Risk"
table(mydataframE$Risk)
```
```{r}
# Looking
summary(mydataframE$Type, maxsum=10)
```
```{r}
# Looking
summary(mydataframE$Country, maxsum=40)
```
```{r}
# 
country.top20 <- names(summary(mydataframE$Country))[1:20] 

library(ggplot2)

gg <- ggplot(data=subset(mydataframE,Country %in% country.top20), aes(x=reorder(Country, Country, length)))
gg <- gg + geom_bar(fill="#ffdb58") 
gg <- gg + labs(title="Country Counts", x="Country", y="Count") 
# Rotate the chart to make this one more readable
gg <- gg + coord_flip() 
# remove "chart junk"
gg <- gg + theme(panel.grid=element_blank(),panel.background=element_blank())
# Display the image
print(gg)
```
```{r}
# Bar graph of counts by Risk 
gg <- ggplot(data=mydataframE, aes(x=Risk)) 
gg <- gg + geom_bar(fill="#ffdb58") 
# force an X scale to be just the limits of the data 
# and to be discrete vs continuous
gg <- gg + scale_x_discrete(limits=seq(max(mydataframE$Risk))) 
gg <- gg + labs(title="'Risk' Counts", x="Risk Score", y="Count") 
gg <- gg + theme(panel.grid=element_blank(),panel.background=element_blank()) 
print(gg)
```
```{r}
# Bar graph of counts by Reliability 
gg <- ggplot(data=mydataframE, aes(x=Reliability)) 
gg <- gg + geom_bar(fill="#ffdb58") 
gg <- gg + scale_x_discrete(limits=seq(max(mydataframE$Reliability))) 
gg <- gg + labs(title="'Reliabiity' Counts", x="Reliability Score",y="Count") 
gg <- gg + theme(panel.grid=element_blank(),panel.background=element_blank()) 
print(gg) 
```
```{r}
country10=summary(mydataframE$Country, maxsum = 10)
# now convert to a percentage by dividing by number of rows
aVar<-country10/nrow(mydataframE)
aVar
```

```{r}
# compute contingency table for Risk/Reliability factors which produces 
# a matrix of counts of rows that have attributes at each (x, y) location
rr.tab=xtabs(~Risk+Reliability, data = mydataframE)
print(ftable(rr.tab)) # print table
```

```{r}
# graphical view
# need to use levelplot function from lattice package
library(lattice)

# Casting table(from our originla dataframe) into a new data frame
rr.df = data.frame(table(mydataframE$Risk, mydataframE$Reliability))

# Setting our column names, table use default one
colnames(rr.df) <- c("Risk", "Reliability", "Freq")

# now create a level plot with readable labels
levelplot(Freq~Risk*Reliability, data=rr.df, main="Risk ~ Reliability", ylab="Reliability", xlab = "Risk", shrink = c(0.5, 1),col.regions = colorRampPalette(c("#D3D3D3","#722f37"))(20))
```

```{r}
# generate random samples for risk & reliability and re-run xtab
# starting PRNG from reproducible point
set.seed(1492) # as it leads to discovery

# generate 260,000 random samples
rel = sample(1:7, 260000, replace = T)
rsk = sample(1:10, 260000, replace = T)

# cast table into data frame
tmp.df = data.frame(table(factor(rsk), factor(rel)))
colnames(tmp.df) <- c("Risk", "Reliability", "Freq")
levelplot(Freq~Reliability*Risk, data = tmp.df, main = "Risk ~ Reliability",ylab = "Reliability", xlab ="Risk",shrink = c(0.5, 1),col.regions = colorRampPalette(c("#D3D3D3","#722f37"))(20))
```

```{r}
# Create a new variable called "simpletype"
# replacing multiple categories with label of "Multiples"
mydataframE$simpletype <- as.character(mydataframE$Type)

# Group all nodes with multiple categories into a new category
mydataframE$simpletype[grep(';', mydataframE$simpletype)] <- "Multiples"

# Turn it into a factor again
mydataframE$simpletype <- factor(mydataframE$simpletype)

rrt.df = data.frame(table(mydataframE$Risk, mydataframE$Reliability, mydataframE$simpletype))
colnames(rrt.df) <- c("Risk", "Reliability", "simpletype", "Freq")
levelplot(Freq ~ Reliability*Risk | simpletype, data = rrt.df,main = "Risk ~ Reliability | Type", ylab = "Risk",xlab = "Reliability", shrink = c(0.5, 1),col.regions =colorRampPalette(c("#D3D3D3","#722f37"))(20))
```

```{r}
# From the existing rrt.df, filter out 'Scanning Host'
rrt.df <- subset(rrt.df, simpletype != "Scanning Host")
levelplot(Freq ~ Reliability*Risk|simpletype, data = rrt.df,main = "Risk - Reliability | Type", ylab = "Risk",xlab = "Realibility", shrink = c(0.5, 1),col.regions =colorRampPalette(c("#D3D3D3","#722f37"))(20))
```

```{r}
# 
rrt.df <- subset(rrt.df, !(simpletype %in% c("Malaware Distribution", "Malaware Domain")))
sprintf("Count: %d; Percent: %2.1f%%", sum(rrt.df$Freq),100*sum(rrt.df$Freq)/nrow(av))
```

```{r}
##
levelplot(Freq ~ Reliability*Risk|simpletype, data = rrt.df,main = "Risk - Reliability | Type", ylab = "Risk",xlab = "Reliability", shrink = c(0.5, 1),col.regions = colorRampPalette(c("#D3D3D3","#722f37"))(20))
```

